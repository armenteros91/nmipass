using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using ThreeTP.Payment.Application.Helpers;

namespace ThreeTP.Payment.Application.DTOs.Requests.Pasarela;

public abstract class BaseTransactionRequestDto
{
    /// <summary>
    /// The type of transaction to be processed.
    /// Values: 'sale', 'auth', 'credit', 'validate', or 'offline'  :default= sale
    /// </summary>
    [Required]
    [JsonPropertyName("type")]
    public string TypeTransaction { get; set; } = "sale";

    /// <summary>
    /// API Security Key assigned to a merchant account.
    /// New keys can be generated from the merchant control panel in Settings > Security Keys 
    /// </summary>
    [Required]
    [JsonPropertyName("security_key")]
    public string SecurityKey { get; set; } = string.Empty;

    #region Payment Card Informations

    /// <summary>
    /// The tokenized version of the customer's card or check information.
    /// This will be generated by Collect.js and is usable only once.
    /// </summary>
    [JsonPropertyName("payment_token")]
    public string? PaymentToken { get; set; }

    /// <summary>
    ///  Credit Card Number
    /// </summary>
    [Required]
    [JsonPropertyName("ccnumber")]//todo: asegurar  enmascarar en logs :fcano 
    public string CreditCardNumber { get; set; }

    /// <summary>
    /// Credit card expiration date.Format: MMYY
    /// </summary>
    [Required]
    [JsonPropertyName("ccexp")]
    public string CreditCardExpiration { get; set; }

    /// <summary>
    /// The card security code. While this is not required, it is strongly recommended.
    /// </summary>
    [JsonPropertyName("cvv")]
    [SensitiveData] //mark ignore sensitive data in logs 
    public string Cvv { get; set; }

    /// <summary>
    /// The type of payment.
    /// Default: 'creditcard'
    /// Values: 'creditcard', 'check', or 'cash'
    /// </summary>
    [JsonPropertyName("payment")]
    public string PaymentType { get; set; } = "creditcard";

    #endregion

    #region Customer  ACH Informations

    /// <summary>
    /// The name on the customer's ACH account.
    /// </summary>
    [JsonPropertyName("checkname")]
    public string CheckName { get; set; }

    /// <summary>
    /// The customer's bank routing number.
    /// </summary>
    [JsonPropertyName("checkaba")]
    public string CheckAba { get; set; }

    /// <summary>
    ///	The customer's bank account number.
    /// </summary>
    [JsonPropertyName("checkaccount")]
    public string CheckAccount { get; set; }

    /// <summary>
    ///  The type of ACH account the customer has. Values: 'business' or 'personal'
    /// </summary>
    [JsonPropertyName("account_holder_type")]
    public string? AccountHolderType { get; set; }

    /// <summary>
    /// The ACH account entity of the customer. Values: 'checking' or 'savings'
    /// </summary>
    [JsonPropertyName("account_type")]
    public string? AccountType { get; set; }

    /// <summary>
    /// The Standard Entry Class code of the ACH transaction. Values: 'PPD', 'WEB', 'TEL', or 'CCD'
    /// </summary>
    [JsonPropertyName("sec_code")]
    public string? StandarEntryClassCode { get; set; }

    #endregion


    #region App integrations

    /// <summary>
    /// The encrypted token created when integration directly to the Google Pay SDK.
    /// </summary>
    [JsonPropertyName("googlepay_payment_data")]
    public string GooglepayPaymentData { get; set; }

    #endregion

    #region Amount

    /// <summary>
    /// Total amount to be charged. For validate,
    /// the amount must be omitted or set to 0.00.  Format: x.xx
    /// </summary>
    [JsonPropertyName("amount")]
    public decimal? Amount { get; set; }

    /// <summary>
    /// Surcharge amount. Format: x.xx
    /// </summary>
    [JsonPropertyName("surcharge")]
    public decimal? SurchargeAmount { get; set; }

    /// <summary>
    /// Convenience fee amount. Format: x.xx 
    /// </summary>
    [JsonPropertyName("convenience_fee")]
    public decimal? ConvenienceFee { get; set; }

    /// <summary>
    /// Miscellaneous fee amount. Format: x.xx 
    /// </summary>
    [JsonPropertyName("misc_fee")]
    public decimal? MiscFeeAmount { get; set; }

    /// <summary>
    /// Custom miscellaneous fee name. Default: Miscellaneous Fee
    /// </summary>
    [JsonPropertyName("misc_fee_name")]
    public string MiscFeeName { get; set; } = "Miscellaneous Fee";

    /// <summary>
    /// How much less a customer paid due to a cash discount.
    /// Format: x.xx, only applicable to cash and check transactions
    /// </summary>
    [JsonPropertyName("cash_discount")]
    public decimal? CashDiscount { get; set; }

    /// <summary>
    /// The final tip amount, included in the transaction, associated with the purchase Format: x.xx
    /// </summary>
    [JsonPropertyName("tip")]
    public decimal? TipAmount { get; set; }

    /// <summary>
    /// The transaction currency. Format: ISO 4217
    /// </summary>
    [JsonPropertyName("currency")]
    public string Currency { get; set; } = "USD";

    /// <summary>
    /// The sales tax included in the transaction amount associated with the purchase.
    /// Setting tax equal to any negative value indicates an order that is exempt from sales tax.
    /// Default: '0.00' Format: x.xx 
    /// </summary>
    [JsonPropertyName("tax")]
    public decimal Tax { get; set; } = 0.00m;

    #endregion

    #region Order Informations

    /// <summary>
    /// Order template ID.
    /// </summary>
    [JsonPropertyName("order_template")]
    public string OrderTemplate { get; set; }

    /// <summary>
    /// Order Id
    /// </summary>
    [JsonPropertyName("orderid")]
    public string? OrderId { get; set; }

    /// <summary>
    /// Order description. Legacy variable includes: orderdescription
    /// </summary>
    [JsonPropertyName("order_description")]
    public string OrderDescription { get; set; }

    /// <summary>
    /// IP address of cardholder, this field is recommended. Format: xxx.xxx.xxx.xxx
    /// </summary>
    [JsonPropertyName("ipaddress")]
    public string IpAddress { get; set; }

    #endregion

    #region Billing Informations

    /// <summary>
    /// Cardholder's first name.Legacy variable includes: firstname
    /// </summary>
    [JsonPropertyName("first_name")]
    public string FirstName { get; set; }

    /// <summary>
    /// Cardholder's last name Legacy variable includes: lastname
    /// </summary>
    [JsonPropertyName("last_name")]
    public string LastName { get; set; }

    /// <summary>
    /// Cardholder's company
    /// </summary>
    [JsonPropertyName("company")]
    public string Company { get; set; }

    /// <summary>
    /// Card billing address
    /// </summary>
    [JsonPropertyName("address1")]
    public string Address1 { get; set; }

    /// <summary>
    ///   	Card billing address, line 2
    /// </summary>
    [JsonPropertyName("address2")]
    public string Address2 { get; set; }

    /// <summary>
    ///	Card billing city
    /// </summary>
    [JsonPropertyName("city")]
    public string City { get; set; }

    /// <summary>
    /// Card billing state. Format: CC
    /// </summary>
    [JsonPropertyName("state")]
    public string State { get; set; }

    /// <summary>
    ///  	Card billing zip code
    /// </summary>
    [JsonPropertyName("zip")]
    public string Zip { get; set; }

    /// <summary>
    /// Card billing country. Country codes are as shown in ISO 3166. Format: CC
    /// </summary>
    [JsonPropertyName("country")]
    public string Country { get; set; }

    /// <summary>
    /// Billing email address
    /// </summary>
    [JsonPropertyName("email")]
    public string Email { get; set; }

    #endregion

    #region 3D secure

    /// <summary>
    ///  	Set 3D Secure condition. Value used to determine E-commerce indicator (ECI).Values: 'verified' or 'attempted'
    /// </summary>
    [JsonPropertyName("cardholder_auth")]
    public string CardHolderAuth { get; set; }

    /// <summary>
    ///  	3DSecure version. Examples: "2.0.0" or "2.2.0"
    /// </summary>
    [JsonPropertyName("three_ds_version")]
    public string ThreeDsVersion { get; set; }

    /// <summary>
    /// Cardholder authentication verification value.Format: base64 encoded
    /// </summary>
    [JsonPropertyName("cavv")]
    public string Cavv { get; set; }

    /// <summary>
    /// Cardholder authentication transaction id. Format: base64 encoded
    /// </summary>
    [JsonPropertyName("xid")]
    public string Xid { get; set; }

    /// <summary>
    /// Directory Server Transactions ID. May be provided as part of 3DSecure 2.0 authentication.
    /// Format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
    /// </summary>
    [JsonPropertyName("directory_server_id")]
    public string DirectoryServerId { get; set; }

    #endregion

    #region Meta Data

    /// <summary>
    /// A single use session ID used by Kount to link the transaction and Data Collector information together.
    /// </summary>
    [JsonPropertyName("transaction_session_id")]
    public string TransactionSessionId { get; set; }

    /// <summary>
    /// Specifies a payment gateway transaction id in order to associate payment information with a Subscription or Customer Vault record.
    /// Must be set with a 'recurring' or 'customer_vault' action.
    /// </summary>
    [JsonPropertyName("source_transaction_id")]
    public string SourceTransactionId { get; set; }

    /// <summary>
    /// You can pass custom information in up to 20 fields.
    /// Format: merchant_defined_field_1=Value
    /// </summary>
    [JsonPropertyName("merchant_defined_field_#")]
    public string MerchantDefinedField { get; set; }

    //Additional
    /// <summary>
    /// If set to true, when the customer is charged, they will be sent a transaction receipt.
    /// Values: 'true' or 'false'
    /// </summary>
    [JsonPropertyName("customer_receipt")]
    public bool? CustomerReceipt { get; set; }

    /// <summary>
    /// Cardholder signature image. For use with "sale" and "auth" actions only.
    /// Format: base64 encoded raw PNG image. (16kiB maximum)
    /// </summary>
    [JsonPropertyName("signature_image")]
    public string SignatureImage { get; set; }

    #endregion
}